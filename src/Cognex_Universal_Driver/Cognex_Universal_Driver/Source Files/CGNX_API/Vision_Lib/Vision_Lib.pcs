'!TITLE "Cognex Vision Library Functions"

#Include "..\CGNX_API.h"

'========================================================================================
'Cognex Vision Library Functions(For function details, refer to Cognex Robot Library manual.)
'========================================================================================

'
'Auto Calibration (Start)
'
Function CGNX_ACB(ByVal srvID As Integer, ByVal cam As String,_
				  ByVal targetID As String) As Variant

	Dim sendMsg As String
	Dim recvMsg As String

	sendMsg = Sprintf("ACB,%s,%s,%s", cam, targetID, CurPos2Str())
	recvMsg = CGNX_ExecuteCmd(srvID, sendMsg)
	CGNX_ACB = Split(recvMsg, ",")
End Function

'
'Auto Calibration (Run)
'
Function CGNX_AC(ByVal srvID As Integer, ByVal cam As String,_
				 ByVal targetID As String) As Variant

	Dim sendMsg As String
	Dim recvMsg As String

	sendMsg = Sprintf("AC,%s,%s,%s", cam, targetID, CurPos2Str())
	recvMsg = CGNX_ExecuteCmd(srvID, sendMsg)
	CGNX_AC = Split(recvMsg, ",")
End Function

'
'HandEye Calibration (Initialize)
'
Function CGNX_HEB(ByVal srvID As Integer, ByVal cam As String) As Variant
	Dim sendMsg As String
	Dim recvMsg As String

	sendMsg = Sprintf("HEB,%s", cam)
	recvMsg = CGNX_ExecuteCmd(srvID, sendMsg)
	CGNX_HEB = Split(recvMsg, ",")
End Function

'
'HandEye Calibration (Run)
'
Function CGNX_HE(ByVal srvID As Integer, ByVal cam As String,_
				 ByVal targetID As String) As Variant

	Dim sendMsg As String
	Dim recvMsg As String

	sendMsg = Sprintf("HE,%s,%s,%s", cam, targetID, CurPos2Str())
	recvMsg = CGNX_ExecuteCmd(srvID, sendMsg)
	CGNX_HE = Split(recvMsg, ",")
End Function

'
'HandEye Calibration (Finish)
'
Function CGNX_HEE(ByVal srvID As Integer, ByVal cam As String) As Variant
	Dim sendMsg As String
	Dim recvMsg As String

	sendMsg = Sprintf("HEE,%s",cam)
	recvMsg = CGNX_ExecuteCmd(srvID, sendMsg)
	CGNX_HEE = Split(recvMsg, ",")
End Function

'
'Registers Target Feature (Golden Pose Training)
'
Function CGNX_TT(ByVal srvID As Integer,_
				 ByVal stepID As String) As Variant

	Dim sendMsg As String
	Dim recvMsg As String

	sendMsg = Sprintf("TT,%s,%s", stepID, CurPos2Str())
	recvMsg = CGNX_ExecuteCmd(srvID, sendMsg)
	CGNX_TT = Split(recvMsg, ",")
End Function

'
'Register Golden Robot Pose (For Target)
'
Function CGNX_TTR(ByVal srvID As Integer,_
				  ByVal stepID As String) As Variant

	Dim sendMsg As String
	Dim recvMsg As String

	sendMsg = Sprintf("TTR,%s,%s", stepID, CurPos2Str())
	recvMsg = CGNX_ExecuteCmd(srvID, sendMsg)
	CGNX_TTR = Split(recvMsg, ",")
End Function

'
'Locates a Target Feature
'
Function CGNX_XT(ByVal srvID As Integer, ByVal stepID As String,_
				 ByVal resultMode As String) As Variant

	Dim sendMsg As String
	Dim recvMsg As String

	sendMsg = Sprintf("XT,%s,%s,%s", stepID,_
					  resultMode, CurPos2Str)
	recvMsg = CGNX_ExecuteCmd(srvID, sendMsg)
	CGNX_XT = Split(recvMsg, ",")
End Function

'
'Train Target Golden Pose
'
Function CGNX_TA(ByVal srvID As Integer, ByVal stepID As Integer) As Variant
	Dim sendMsg As String
	Dim recvMsg As String

	sendMsg = Sprintf("TA,%d",stepID)
	recvMsg = CGNX_ExecuteCmd(srvID, sendMsg)
	CGNX_TA = Split(recvMsg, ",")
End Function

'
'Locate Target Feature 
'
Function CGNX_XA(ByVal srvID As Integer, ByVal stepID As Integer,_
				 ByVal resultMode As String) As Variant

	Dim sendMsg As String
	Dim recvMsg As String

	sendMsg = Sprintf("XA,%d,%s,%s", stepID,_
					  resultMode, CurPos2Str())
	recvMsg = CGNX_ExecuteCmd(srvID, sendMsg)
	CGNX_XA = Split(recvMsg, ",")
End Function

'
'Locates target (based on Max number)
'
Function CGNX_XTN(ByVal srvID As Integer, ByVal stepID As Integer,_
				  ByVal maxResults As Integer,_
				  ByVal resultMode As String) As Variant

	Dim sendMsg As String
	Dim recvMsg As String

	sendMsg = Sprintf("XTN,%d,%d,%s,%s",_
					  stepID, maxResults,_
					  resultMode, CurPos2Str())
	recvMsg = CGNX_ExecuteCmd(srvID, sendMsg)
	CGNX_XTN = Split(recvMsg, ",")
End Function

'
'Perform an Intrinsic (Checkerboard) Calibration
'
Function CGNX_IC(ByVal srvID As Integer, ByVal cam As Integer) As Variant
	Dim sendMsg As String
	Dim recvMsg As String

	sendMsg = Sprintf("IC,%d,%s", cam, CurPos2Str())
	recvMsg = CGNX_ExecuteCmd(srvID, sendMsg)
	CGNX_IC = Split(recvMsg, ",")
End Function

'
'Attaches a non-HE calib cam to the calibration of a HE calib cam
'
Function CGNX_CS(ByVal srvID As Integer, ByVal heCam As Integer,_
				 ByVal nonHeCam As Integer) As Variant

	Dim sendMsg As String
	Dim recvMsg As String

	sendMsg = Sprintf("CS,%d,%d", heCam, nonHeCam)
	recvMsg = CGNX_ExecuteCmd(srvID, sendMsg)
	CGNX_CS = Split(recvMsg, ",")
End Function

'----------------------------------------------------------------------------------------
'Convenience Functions
'----------------------------------------------------------------------------------------

'
' AutoCalibration Feature (Convenience Function)
'
Function CGNX_AutoCalib(ByVal srvID As Integer,_
						ByVal cam As String,_
				   		ByVal targetID As String,_
						ByVal settleTime As Single) As Integer

	Dim recvMsg As Variant
	Dim nextPos As Position
	nextPos = CurPos
	
	CGNX_AutoCalib = FAILED
	recvMsg = CGNX_ACB(srvID, cam, targetID)
	Do 
		Select Case Val(recvMsg(1))
			Case 2	'Success, Continue
				
				LetX nextPos = recvMsg(2)
				LetY nextPos = recvMsg(3)
				LetRz nextPos = recvMsg(5)

				Call Move2PointAndSettle(nextPos, settleTime)
				recvMsg = CGNX_AC(srvID, cam, targetID)
			
			Case 1	' We are done 
				CGNX_AutoCalib = SUCCEEDED
			
			Case Else	' Error
				Exit Do
		End Select 
	Loop Until CGNX_AutoCalib = SUCCEEDED
End Function

'
'Perform Handeye Calibration 2D
'
Function CGNX_HECalib2D(ByVal srvID As Integer,_
						ByVal cam As String,_
						ByVal targetID As String,_
						ByVal settleTime As Single,_
						ByVal numPosX As Integer,_
						ByVal stepSizeX As Single,_
						ByVal numPosY As Integer,_
						ByVal stepSizeY As Single,_
						ByVal numPosRot As Integer,_
						ByVal angleMin As Single,_
						ByVal angleMax As Single) As Integer
	
	Dim recvMsg As Variant
	Dim startPos As Position
	Dim movePos As Position
	Dim stepSizeAngle As Single

	'Loop Counters
	Dim yIndex As Integer = 0
	Dim	xIndex As Integer = 0
	Dim aIndex As Integer = 0
	
	CGNX_HECalib2D = FAILED

	recvMsg = CGNX_HEB(srvID, cam)
	if recvMsg(1) <> Int2Str(SUCCEEDED) Then Exit Function

	'Remember Start Position
	startPos = CurPos
	movePos = startPos

	'Translation Moves
	For yIndex = 0 To (numPosY - 1)
		LetY movePos = PosY(startPos) + (yIndex * stepSizeY)
		For xIndex = 0 To (numPosX - 1)
			LetX movePos = PosX(startPos) + (xIndex * stepSizeX)

			Call Move2PointAndSettle(movePos, settleTime)
			
			recvMsg = CGNX_HE(srvID, cam, targetID)
			if recvMsg(1) <> Int2Str(SUCCEEDED) Then Exit Function
		Next xIndex	' End for X...
	Next yIndex ' End for Y...

	'Rotation Moves
	stepSizeAngle = (angleMax - angleMin) / (numPosRot - 1)
	movePos = startPos
	LetRz movePos = PosRz(movePos) + angleMin
	For aIndex = 0 To (numPosRot - 1)
		LetRz movePos = PosRz(movePos) + (aIndex * stepSizeAngle)

		Call Move2PointAndSettle(movePos, settleTime)
				
		recvMsg = CGNX_HE(srvID, cam, targetID)
		if recvMsg(1) <> Int2Str(SUCCEEDED) Then Exit Function
	Next aIndex ' End for A...
	
	recvMsg = CGNX_HEE(srvID, cam)
	If recvMsg(1) <> Int2Str(SUCCEEDED) Then Exit Function
	
	CGNX_HECalib2D = SUCCEEDED	
End Function		

'
'Perform Handeye Calibration (General)
'
Function CGNX_HECalibration(ByVal srvID As Integer,_
							ByVal cam As Integer,_
							ByVal targetID As Integer,_
							ByVal settleTime As Single,_
							ByVal numPos As Integer,_
							ByVal startPoseIndex As Integer) As Integer
	
	Dim recvMsg As Variant
	
	'Loop Counter
	Dim poseIndex As Integer = 0

	CGNX_HECalibration = FAILED

	recvMsg = CGNX_HEB(srvID,cam)
	if recvMsg(1) <> Int2Str(SUCCEEDED) Then Exit Function

	'Move through Positions
	For poseIndex = 0 To (numPos - 1)
		TakeArm
		Move P, P[startPoseIndex + poseIndex]
		Delay settleTime * 1000	' Convert to Millisecons

		recvMsg = CGNX_HE(srvID, cam, targetID)
		if recvMsg(1) <> Int2Str(SUCCEEDED) Then Exit Function
	Next poseIndex
		
	recvMsg = CGNX_HEE(srvID, cam)
	If recvMsg(1) <> Int2Str(SUCCEEDED) Then Exit Function
End Function

'
'Register Golden Position (Target)
'
Function CGNX_TrainVGRTarget(ByVal srvID As Integer,_
							 ByVal stepID As String) As Integer
	Dim recvMsg As Variant
	CGNX_TrainVGRTarget = FAILED
	recvMsg = CGNX_TT(srvID, stepID)

	If recvMsg(1) <> Int2Str(SUCCEEDED) Then Exit Function
	CGNX_TrainVGRTarget = SUCCEEDED
End Function

'
'Register Golden Pose (Robot CurPos)
'
Function CGNX_TrainVGRMotion(ByVal srvID As Integer,_
							 ByVal stepID As String) As Integer
	Dim recvMsg As Variant
	CGNX_TrainVGRMotion = FAILED
	recvMsg = CGNX_TTR(srvID, stepID)

	If recvMsg(1) <> Int2Str(SUCCEEDED) Then Exit Function
	CGNX_TrainVGRMotion = SUCCEEDED
End Function

'
'Run selected VGR Step
'
Function CGNX_RunVGR(ByVal srvID As Integer,_
					 ByVal stepID As String,_
					 ByVal resultMode As String) As Variant

	Dim recvMsg As Variant
	Dim posStr As String
	Dim posResult As Position

	CGNX_RunVGR = CreateArray(2,VT_VARIANT)

	'Initialize Return Value 
	CGNX_RunVGR(0) = FAILED
	CGNX_RunVGR(1) = posResult

	recvMsg = CGNX_XT(srvID, stepID, resultMode)
	If recvMsg(1) <> Int2Str(SUCCEEDED) Then Exit Function

	posStr = Sprintf("%f,%f,%f,%f,%f,%f",_
					 recvMsg(2), recvMsg(3), recvMsg(4),_
					 recvMsg(5), recvMsg(6), recvMsg(7))

	posResult = Str2Pos(posStr)
	
	'Return Success Message 
	CGNX_RunVGR(0) = SUCCEEDED
	CGNX_RunVGR(1) = posResult
End Function

'
'Runs selected VGR step + Align provide robot tool
'
Function CGNX_RunVGRPicked(ByVal srvID As Integer,_
						   ByVal stepID As String,_
						   ByVal setTool As Integer) As Variant

	Dim resultMode As String = "Abs"
	Dim fResult As Variant

	Dim CurPos_Trans As Trans, CurPosInv_Trans As Trans, Target_Trans As Trans
	Dim Target_Pos As Position, Tool_Def As Position

	CGNX_RunVGRPicked = CreateArray(2,VT_VARIANT)

	'Initialize Return Value 
	CGNX_RunVGRPicked(0) = FAILED
	CGNX_RunVGRPicked(1) = Tool_Def

	fResult = CGNX_RunVGR(srvID, stepID, resultMode)
	Target_Pos = fResult(1)

	If fResult(0)  = SUCCEEDED Then 
		' Get RunTime Tool Offset w.r.t. T0.
		' TransCurrTool_2_NewTool = Inv(TransCurPos_2_Base) * TransNewPick_2_Base

		' Get Current Position about T0 (TrainTime Tool) (w.r.t. W0)
		CurPos_Trans = P2T(ConvertPosTool(CurPos, setTool, 0))			
		
		' Get Pick Target about T0 (RunTime Tool) (w.r.t. W0)
		Target_Trans = P2T(ConvertPosTool(Target_Pos, setTool, 0))		
		
		' Get Offset associated with Pick Target (w.r.t. RunTime Tool)
		CurPosInv_Trans = TInv(CurPos_Trans)
									
		' Transform to RuntimeTool w.r.t. TrainTime Tool
		Tool_Def = T2P(TMul(CurPosInv_Trans, Target_Trans))

		'Set Tool
		TakeArm
		Tool setTool, Tool_Def

		'Set Output
		CGNX_RunVGRPicked(0) = SUCCEEDED
		CGNX_RunVGRPicked(1) = Tool_Def
	End If
End Function

'
'Registers the golden pose of the target selected by step ID
'
Function CGNX_TrainAlign(ByVal srvID As Integer,_
						 ByVal stepID As String) As Integer

	Dim recvMsg As Variant
	recvMsg = CGNX_TA(srvID, stepID)

	'Initialize Return Value
	CGNX_TrainAlign = FAILED

	If recvMsg(1) = Int2Str(SUCCEEDED) Then Exit Function

	'Return Success Message
	CGNX_TrainAlign = SUCCEEDED	
End Function

'
'Locates the target selected by the step ID and returns the required position of the 
'motion unit to align the target with its trained golden position.
'
Function CGNX_RunAlign(ByVal srvID As Integer,_
					   ByVal stepID As String,_
					   ByVal resultMode As String) As Variant

	Dim recvMsg As Variant
	Dim posStr As String
	Dim posResult As String

	CGNX_RunAlign = CreateArray(2, VT_VARIANT)

	'Initiate Return Value
	CGNX_RunAlign(0) = FAILED
	CGNX_RunAlign(1) = posResult
	
	recvMsg = CGNX_XA(srvID, stepID, resultMode)
	If recvMsg(1) <> Int2Str(SUCCEEDED) Then Exit Function

	posStr = Sprintf("%f,%f,%f,%f,%f,%f",_
				 	 recvMsg(2), recvMsg(3), recvMsg(4),_
				 	 recvMsg(5), recvMsg(6), recvMsg(7))

	posResult = Str2Pos(posStr)
	
	'Return Success Message
	CGNX_RunAlign(0) = SUCCEEDED
	CGNX_RunAlign(1) = posResult
End Function
