'!TITLE "Cognex Function API"

#Include "CGNX_API.h"

Sub Main
	
End Sub

'========================================================================================
' Initialization / Close
' Communication line number (IP address of PC, Port number [23], Delimiter [LF])
'========================================================================================

'
'Open the communication line
'
Function CGNX_DevOpen(ByVal srvID As Integer) As Integer
	Comm.Close srvID		'Close Comm Port

	On Error GoTo Finally
	    If Comm.State(srvID) = 0 Then
			Comm.Open srvID
		End If	
		CGNX_DevOpen = SUCCEEDED		' Comm Port Successfully Open
		Exit Function
	Finally:
		MsgBox("Communication connection error. Revise the connection.")
		CGNX_DevOpen = FAILED			' Comm Por Failed to Open
End Function

'
'Close the communication line
'
Sub CGNX_DevClose(ByVal srvID As Integer)
	Comm.Close srvID
End Sub

'========================================================================================
' Reception/Transmisison (Denso to Cognex Commands)
'========================================================================================

'
'Sends the command string to the selected server and waits for a response
'
Function CGNX_ExecuteCmd(ByVal srvID As Integer, ByVal cmdStr As String) As String
	Dim command As Variant

	On Error GoTo ErrorHandler
		Call CGNX_DevOpen(srvID)			' Open Comm Port

		Comm.Output srvID, cmdStr			' Send String Message to PC
		CGNX_ExecuteCmd = Comm.Input(srvID)	' Wait for Message Response
		
		Call CGNX_DevClose(srvID)			' Close Comm Port
		Exit Function							
	ErrorHandler: 
		PrintMsg Now & "- " & err.OriginalNumber &": " & err.Description
End Function

'========================================================================================
' Reception/Transmisison (Cognex to Denso Commands)
'========================================================================================

'
'Wait for the Vision System to send a Command (Used for HMI Program)
'
Function CGNX_RecvCmd(ByVal srvID As Integer) As String
	On Error GoTo ErrorHandler
		CGNX_RecvCmd = Comm.Input(srvID)		' Wait for Message Response
		Exit Function							
	ErrorHandler: 
		PrintMsg Now & "- " & err.OriginalNumber &": " & err.Description
End Function

'
'Send response after processing the received command
'
Sub CGNX_SendCmd(ByVal srvID As Integer, ByVal responseStr As String) 
	On Error GoTo ErrorHandler
		Comm.Output srvID, responseStr			' Send String Message to PC
		Exit Sub							
	ErrorHandler: 
		PrintMsg Now & "- " & err.OriginalNumber &": " & err.Description
End Sub

'========================================================================================
'Cognex API Function(For function details, refer to Cognex Robot Library manual.)
'======================================================================================== 

'
'Get Speed
'
Function CGNX_GS(ByVal recvCmd As Variant) As String
	Dim responseMsg(2) As Variant 

	If checkInputData(recvCmd(0), "GS") = Int2Str(FAILED) Then 
		CGNX_GS = "GS," + Int2Str(FAILED)
		Exit Function
	End If

	On Error GoTo ErrorHandler

		'Get current external speed
		responseMsg(0) = recvCmd(0)
		responseMsg(1) = Int2Str(SUCCEEDED)
		responseMsg(2) = Sng2Str(CurExtSpd)
		CGNX_GS = Join(responseMsg, ",")

		Exit Function

	ErrorHandler:
		CGNX_GS = recvCmd(0) + "," + Int2Str(FAILED)
		PrintMsg Now & "- " & err.OriginalNumber &": " & err.Description
End Function

'
'Move Relative (Position Type)
'
Function CGNX_MR(ByVal recvCmd As Variant) As String
	Dim responseMsg(7) As Variant
	Dim relRobPos As Position

	If checkInputData(recvCmd(0), "MR") = Int2Str(FAILED) Then 
		CGNX_MR = "MR," + Int2Str(FAILED)
		Exit Function
	End If

	On Error GoTo ErrorHandler

		'X-Y-Z Offets
		LetX relRobPos = Val(recvCmd(1))
		LetY relRobPos = Val(recvCmd(2))
		LetZ relRobPos = Val(recvCmd(3))
			
		'Rz-Ry-Rx (A-B-C on Cognex Documentation) Offsets
		LetRz relRobPos =  Val(recvCmd(4))
		LetRy relRobPos =  Val(recvCmd(5))
		LetRx relRobPos =  Val(recvCmd(6))

		'Do Relative Move
		TakeArm Keep = 1
		Speed 100
		Move P, @E Dev(CurPos, relRobPos)
		GiveArm

		'Send Response
		responseMsg(0) = recvCmd(0)
		responseMsg(1) = Int2Str(SUCCEEDED)
		responseMsg(2) = Dob2Str(PosX(CurPos))
		responseMsg(3) = Dob2Str(PosY(CurPos))
		responseMsg(4) = Dob2Str(PosZ(CurPos))
		responseMsg(5) = Dob2Str(PosRz(CurPos))
		responseMsg(6) = Dob2Str(PosRy(CurPos))
		responseMsg(7) = Dob2Str(PosRx(CurPos))
		CGNX_MR = Join(responseMsg, ",")
		Exit Function

	ErrorHandler:
		CGNX_MR = recvCmd(0) + "," + Int2Str(FAILED)
		PrintMsg Now & "- " & err.OriginalNumber &": " & err.Description
End Function

'
' Move to Point (P Variable)
' 
Function CGNX_MP(ByVal recvCmd As Variant) As String
	Dim responseMsg(7) As Variant 

	If checkInputData(recvCmd(0), "MP") = Int2Str(FAILED) Then 
		CGNX_MP = "MP," + Int2Str(FAILED)
		Exit Function
	End If

	On Error GoTo ErrorHandler
		
		'Move to Point Position
		TakeArm Keep = 1
		Speed 100
		Move P, @E P[Val(recvCmd(1))]
		GiveArm

		'Send Response
		responseMsg(0) = recvCmd(0)
		responseMsg(1) = Int2Str(SUCCEEDED)
		responseMsg(2) = Dob2Str(PosX(CurPos))
		responseMsg(3) = Dob2Str(PosY(CurPos))
		responseMsg(4) = Dob2Str(PosZ(CurPos))
		responseMsg(5) = Dob2Str(PosRz(CurPos))
		responseMsg(6) = Dob2Str(PosRy(CurPos))
		responseMsg(7) = Dob2Str(PosRx(CurPos))
		CGNX_MP = Join(responseMsg, ",")
		
		Exit Function

	ErrorHandler:
		CGNX_MP = recvCmd(0) + "," + Int2Str(FAILED)
		PrintMsg Now & "- " & err.OriginalNumber &": " & err.Description
End Function

'
'Move Relative (Joint Type)
' 
Function CGNX_MJ(ByVal recvCmd As Variant) As String
	Dim responseMsg(7) As Variant
	Dim relRobPos As Joint

	If checkInputData(recvCmd(0), "MJ") = Int2Str(FAILED) Then 
		CGNX_MJ = "MJ," + Int2Str(FAILED)
		Exit Function
	End If

	On Error GoTo ErrorHandler

		'Joint Offets
		LetJ 1, relRobPos = Joint(1, CurJnt) + Val(recvCmd(1))
		LetJ 2, relRobPos = Joint(2, CurJnt) + Val(recvCmd(2))
		LetJ 3, relRobPos = Joint(3, CurJnt) + Val(recvCmd(3))
		LetJ 4, relRobPos = Joint(4, CurJnt) + Val(recvCmd(4))
		LetJ 5, relRobPos = Joint(5, CurJnt) + Val(recvCmd(5))
		LetJ 6, relRobPos = Joint(6, CurJnt) + Val(recvCmd(6))

		'Do Relative Move
		TakeArm Keep = 1
		Speed 100
		Move P, @E relRobPos
		GiveArm

		'Send Response
		responseMsg(0) = recvCmd(0)
		responseMsg(1) = Int2Str(SUCCEEDED)
		responseMsg(2) = Dob2Str(Joint(1, CurJnt))
		responseMsg(3) = Dob2Str(Joint(2, CurJnt))
		responseMsg(4) = Dob2Str(Joint(3, CurJnt))
		responseMsg(5) = Dob2Str(Joint(4, CurJnt))
		responseMsg(6) = Dob2Str(Joint(5, CurJnt))
		responseMsg(7) = Dob2Str(Joint(6, CurJnt))
		CGNX_MJ = Join(responseMsg, ",")
		Exit Function

	ErrorHandler:
		CGNX_MJ = recvCmd(0) + "," + Int2Str(FAILED)
		PrintMsg Now & "- " & err.OriginalNumber &": " & err.Description
End Function

'
'Get API Version
'
Function CGNX_GV(ByVal recvCmd As Variant) As String
	Dim responseMsg(2) As Variant

	If checkInputData(recvCmd(0), "GV") = Int2Str(FAILED) Then 
		CGNX_GV = "GV," + Int2Str(FAILED)
		Exit Function
	End If

	On Error GoTo ErrorHandler	
		' Get API Version
		responseMsg(0) = recvCmd(0)
		responseMsg(1) = Int2Str(SUCCEEDED)
		responseMsg(2) = CGNX_API_VER
		
		CGNX_GV = Join(responseMsg, ",")
		Exit Function
			
	ErrorHandler:
		CGNX_GV = recvCmd(0) + "," + Int2Str(FAILED)
		PrintMsg Now & "- " & err.OriginalNumber &": " & err.Description
End Function

'========================================================================================
'Utility Functions
'========================================================================================

'
'
'
Function Int2Str(ByVal num As Integer) As String
	Int2Str = Trim(Str(num))
End Function

'
'
'
Function Dob2Str(ByVal num As Double) As String
	Dob2Str = Trim(Str(num))
End Function

'
'
'
Function Sng2Str(ByVal num As Single) As String
	Sng2Str = Trim(Str(num))
End Function

'
'
'
Function checkInputData(ByVal inputData As Variant, ByVal setData As String) As String
	If inputData = setData Then 
		checkInputData = Int2Str(SUCCEEDED)
	Else
		MsgBox("Input data is incorrect")
		checkInputData = Int2Str(FAILED)
	End If
End Function
